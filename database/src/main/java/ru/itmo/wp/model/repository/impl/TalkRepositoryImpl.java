package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Talk;
import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.TalkRepository;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TalkRepositoryImpl implements TalkRepository {
    @Override
    public Talk find(long id) {
        try (DatabaseUtils.QueryResultHolder queryResultHolder
                     = DatabaseUtils.find("SELECT * FROM Talk WHERE id=?", 1,
                String.valueOf(id))) {
            return toTalk(queryResultHolder.getResultSetMetaData(), queryResultHolder.getResultSet());
        } catch (SQLException e) {
            throw new RepositoryException("Can't find Talk.", e);
        }
    }

    @Override
    public List<Talk> findByUserOrderedByCreationTime(User user) {
        List<Talk> talks = new ArrayList<>();
        try (DatabaseUtils.QueryResultHolder queryResultHolder = DatabaseUtils.find(
                "SELECT * FROM Talk WHERE sourceUserId=? OR targetUserId=? ORDER BY creationTime DESC, id DESC",
                2,
                String.valueOf(user.getId()),
                String.valueOf(user.getId()))) {
            Talk talk;
            while ((talk = toTalk(queryResultHolder.getResultSetMetaData(), queryResultHolder.getResultSet())) != null) {
                talks.add(talk);
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find Talk.", e);
        }
        return talks;
    }

    @Override
    public void save(Talk talk) {
        try (ResultSet generatedKeys = DatabaseUtils.save(
                "INSERT INTO `Talk` (`sourceUserId`,`targetUserId`, `text`, `creationTime`) VALUES (?, ?, ?, NOW())",
                "Can't save Talk.",
                2,
                String.valueOf(talk.getSourceUserId()),
                String.valueOf(talk.getTargetUserId()),
                talk.getText())) {
            if (generatedKeys.next()) {
                talk.setId(generatedKeys.getLong(1));
                talk.setCreationTime(find(talk.getId()).getCreationTime());
            } else {
                throw new RepositoryException("Can't save Talk [no autogenerated fields].");
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Talk.", e);
        }
    }

    private Talk toTalk(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }

        Talk talk = new Talk();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id":
                    talk.setId(resultSet.getLong(i));
                    break;
                case "sourceUserId":
                    talk.setSourceUserId(resultSet.getLong(i));
                    break;
                case "targetUserId":
                    talk.setTargetUserId(resultSet.getLong(i));
                    break;
                case "text":
                    talk.setText(resultSet.getString(i));
                    break;
                case "creationTime":
                    talk.setCreationTime(resultSet.getTimestamp(i));
                    break;
                default:
                    // No operations.
            }
        }

        return talk;
    }
}
