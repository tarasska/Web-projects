package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.EventRepository;

import java.sql.*;

public class EventRepositoryImpl implements EventRepository {
    @Override
    public Event find(long id) {
        try (DatabaseUtils.QueryResultHolder queryResultHolder
                     = DatabaseUtils.find("SELECT * FROM Event WHERE id=?", 1,
                String.valueOf(id))) {
            return toEvent(queryResultHolder.getResultSetMetaData(), queryResultHolder.getResultSet());
        } catch (SQLException e) {
            throw new RepositoryException("Can't find Event.", e);
        }
    }


    @Override
    public void save(Event event) {
        try (ResultSet generatedKeys = DatabaseUtils.save(
                "INSERT INTO `Event` (`userId`, `type`, `creationTime`) VALUES (?, ?, NOW())",
                "Can't save Event.",
                1,
                String.valueOf(event.getUserId()),
                event.getType().name())) {
            if (generatedKeys.next()) {
                event.setId(generatedKeys.getLong(1));
                event.setCreationTime(find(event.getId()).getCreationTime());
            } else {
                throw new RepositoryException("Can't save Event [no autogenerated fields].");
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Event.", e);
        }
    }

    private Event toEvent(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }

        Event event = new Event();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id":
                    event.setId(resultSet.getLong(i));
                    break;
                case "userId":
                    event.setUserId(resultSet.getLong(i));
                    break;
                case "type":
                    event.setType(Event.EventType.valueOf(resultSet.getString(i)));
                    break;
                case "creationTime":
                    event.setCreationTime(resultSet.getTimestamp(i));
                    break;
                default:
                    // No operations.
            }
        }

        return event;
    }
}
